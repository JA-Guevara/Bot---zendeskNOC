import os
import asyncio
import json
import logging
from utils.config import ZENDESK_USER, ZENDESK_PASSWORD, ZENDESK_URL, load_selectors
from logging_pages.logging_config import setup_logging

logger_server = logging.getLogger('main')

class LoginPage:
    def __init__(self, page, browser_manager=None):
        self.page = page
        self.browser_manager = browser_manager
        self.selectors = load_selectors()["login"]

    async def clear_cache_and_cookies(self):
        """Limpia las cookies y recarga la p√°gina para simular la limpieza de la cach√©."""
        logger_server.info("üßπ Limpiando cookies...")
        await self.page.context.clear_cookies()  # Limpiar cookies

        # Forzar una recarga de la p√°gina para simular la limpieza de la cach√©
        logger_server.info("üßπ Recargando la p√°gina para limpiar la cach√©...")
        await self.page.reload()

    async def verify_cookies(self):
        """Verifica si las cookies son v√°lidas y si hay una sesi√≥n activa."""
        cookies_exist = os.path.exists("user_data.json")
        cookies_valid = False

        if cookies_exist:
            try:
                with open("user_data.json", "r") as file:
                    storage_data = json.load(file)
                    cookies = storage_data.get("cookies", [])
                    cookies_valid = bool(cookies)

                    # Cargar las cookies en el contexto del navegador
                    if cookies_valid:
                        await self.page.context.add_cookies(cookies)
                        logger_server.info("‚úÖ Cookies cargadas en el contexto del navegador.")
            except Exception as e:
                logger_server.error(f"‚ö†Ô∏è Error leyendo archivo de cookies: {e}")

        if cookies_valid:
            logger_server.info("‚úÖ Cookies v√°lidas encontradas. Verificando sesi√≥n activa...")
            
            # Intentar cargar la p√°gina para verificar si realmente hay sesi√≥n activa
            await self.page.goto(ZENDESK_URL)
            
            # Esperar a que la p√°gina cargue completamente
            await self.page.wait_for_load_state("networkidle")

            # Verificar si el usuario est√° autenticado
            try:
                await self.page.wait_for_selector(self.selectors["welcome_message"], timeout=5000)
                logger_server.info("‚úÖ Sesi√≥n activa confirmada.")
                return True
            except Exception as e:
                logger_server.info("üîÑ Las cookies no son v√°lidas. Iniciando sesi√≥n desde cero...")
                return False

        return False

    async def save_session_state(self):
        """Guarda el estado de la sesi√≥n (cookies y datos) en un archivo JSON."""
        try:
            storage_state = await self.page.context.storage_state()
            with open("user_data.json", "w") as file:
                json.dump(storage_state, file)
            logger_server.info("‚úÖ Estado de sesi√≥n guardado en 'user_data.json'.")
        except Exception as e:
            logger_server.error(f"‚ö†Ô∏è Error guardando el estado de sesi√≥n: {e}")

    async def stage_login(self):
        """Maneja el proceso completo de inicio de sesi√≥n."""
        logger_server.info("üöÄ Iniciando etapa de login...")
        try:
            # Verificar si las cookies son v√°lidas
            cookies_valid = await self.verify_cookies()

            if not cookies_valid:
                logger_server.info("üîÑ No se encontraron cookies v√°lidas. Iniciando sesi√≥n desde cero...")

                # Limpiar cookies y recargar la p√°gina
                await self.clear_cache_and_cookies()

                # Navegar a la p√°gina de login
                logger_server.info(f"üåç Navegando a {ZENDESK_URL}...")
                await self.page.goto(ZENDESK_URL)

                # Rellenar el formulario de login
                logger_server.info("üîë Rellenando usuario y contrase√±a.")
                await self.page.fill(self.selectors["email_field"], ZENDESK_USER)
                await self.page.click(self.selectors["submit_button"])
                await self.page.fill(self.selectors["email_password_field"], ZENDESK_PASSWORD)
                await self.page.click(self.selectors["login_button"])

                # Seleccionar tipo de autenticaci√≥n
                logger_server.info("üîè Seleccionando tipo de autenticaci√≥n...")
                await self.page.click(self.selectors["button_not"])
                await self.page.click(self.selectors["button_call"])
                await self.page.click(self.selectors["button_day"])
                
                await asyncio.sleep(30)
                
                await self.page.click(self.selectors["show_button"])
                await self.page.click(self.selectors["logged_button"])

                # Esperar que la p√°gina cargue completamente
                logger_server.info("‚è≥ Esperando que la red se estabilice despu√©s del inicio de sesi√≥n.")
                await self.page.wait_for_load_state("networkidle", timeout=3000)

                # Guardar el estado de sesi√≥n (cookies y datos)
                await self.save_session_state()

            logger_server.info("‚úÖ Interacciones completadas exitosamente.")
            return True

        except Exception as e:
            logger_server.error(f"‚ùå Error durante el login o interacciones: {e}")
            return False